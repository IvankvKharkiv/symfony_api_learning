<?php

declare(strict_types=1);

namespace App\Tests;

use App\Repository\UserRepository;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\UrlHelper;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

/**
 * @internal
 * @coversNothing
 */
class AuthorizationTest extends WebTestCase
{
    private KernelBrowser $client;
    private UserRepository|null $userRepo;
    private RouterInterface|null $router;
    private UrlHelper|null $urlHelper;
    private UserRepository|null $adminRepo;

    public function setUp(): void
    {
        $this->client = static::createClient();

        parent::setUp(); // TODO: Change the autogenerated stub

        $container = static::getContainer();

        $this->router = $container->get('router');
        $this->userRepo = $container->get(UserRepository::class);
    }

    public function testAnAdmingCanWisitAdmingDashboard()
    {
        $testAdmin = $this->userRepo->findOneByEmail('admin@gmail.com');
        $this->client->loginUser($testAdmin);
        $this->client->request('GET', $this->router->generate('app_admin_dashboard'));
        $this->assertResponseIsSuccessful();
    }

    public function testAnUserCantWisitAdmingDashboard()
    {
        $testUser = $this->userRepo->findOneByEmail('mail3@example.com');
        $this->client->loginUser($testUser);
        $this->client->catchExceptions(false);
        $this->expectException(AccessDeniedException::class);
        $this->client->request('GET', $this->router->generate('app_admin_dashboard'));
    }

    public function testUserCantViewAnotherUserAccount()
    {
        $testUser = $this->userRepo->findOneByEmail('mail3@example.com');
        $this->client->loginUser($testUser);
        $this->client->catchExceptions(false);
        $this->expectException(AccessDeniedException::class);
        $this->client->request('GET', '/accounts/1');
    }

    public function testUserCanViewTheirOwnAccount()
    {
        $testUser = $this->userRepo->findOneByEmail('accountuser@gmail.com');
        $this->client->loginUser($testUser);
        $this->client->request('GET', '/accounts/1');
        $this->assertResponseIsSuccessful();
    }

    public function testManagerCanViewAccountTheyManage()
    {
        $testUser = $this->userRepo->findOneByEmail('accountmanager@gmail.com');
        $this->client->loginUser($testUser);
        $this->client->request('GET', '/accounts/1');
        $this->assertResponseIsSuccessful();
    }
}
